import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Check, Crown, Star, Sparkles } from "lucide-react";

// Make sure to call `loadStripe` outside of a component's render to avoid
// recreating the `Stripe` object on every render.
if (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {
  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');
}
const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);

const SubscribeForm = () => {
  const stripe = useStripe();
  const elements = useElements();
  const { toast } = useToast();
  const { t } = useTranslation();
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!stripe || !elements) return;

    setIsLoading(true);

    const { error } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        return_url: `${window.location.origin}/dashboard?subscription=success`,
      },
    });

    if (error) {
      toast({
        title: "Payment Failed",
        description: error.message,
        variant: "destructive",
      });
    } else {
      toast({
        title: "Welcome to Premium!",
        description: "Your subscription is now active. Enjoy all premium features!",
      });
    }

    setIsLoading(false);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <PaymentElement />
      <Button 
        type="submit" 
        disabled={!stripe || isLoading}
        className="w-full bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70"
      >
        {isLoading ? (
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
            Processing...
          </div>
        ) : (
          <>
            <Crown className="w-4 h-4 mr-2" />
            Subscribe to Premium
          </>
        )}
      </Button>
    </form>
  );
};

export default function Subscribe() {
  const { t } = useTranslation();
  const [clientSecret, setClientSecret] = useState("");
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Create subscription as soon as the page loads
    apiRequest("POST", "/api/create-subscription")
      .then((res) => res.json())
      .then((data) => {
        setClientSecret(data.clientSecret);
        setIsLoading(false);
      })
      .catch((error) => {
        console.error("Error creating subscription:", error);
        setIsLoading(false);
      });
  }, []);

  const premiumFeatures = [
    {
      icon: <Sparkles className="w-5 h-5 text-primary" />,
      title: "AI Meal Planner",
      description: "Personalized meal plans generated by AI based on your goals and preferences"
    },
    {
      icon: <Star className="w-5 h-5 text-primary" />,
      title: "Guided Meditation",
      description: "Premium meditation sessions with progress tracking and advanced timer features"
    },
    {
      icon: <Crown className="w-5 h-5 text-primary" />,
      title: "Premium Challenges",
      description: "Exclusive wellness challenges designed to build lasting habits"
    },
    {
      icon: <Check className="w-5 h-5 text-primary" />,
      title: "Advanced Analytics",
      description: "In-depth insights and trends from your wellness journey data"
    }
  ];

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary/5 to-primary/10 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4" />
          <p className="text-muted-foreground">Setting up your subscription...</p>
        </div>
      </div>
    );
  }

  if (!clientSecret) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary/5 to-primary/10 flex items-center justify-center">
        <Card className="max-w-md w-full mx-4">
          <CardHeader className="text-center">
            <CardTitle className="text-destructive">Subscription Error</CardTitle>
            <CardDescription>
              Unable to set up subscription. Please try again later.
            </CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 to-primary/10 py-12">
      <div className="max-w-4xl mx-auto px-4">
        <div className="text-center mb-8">
          <Badge variant="secondary" className="mb-4">
            <Crown className="w-4 h-4 mr-1" />
            Premium Subscription
          </Badge>
          <h1 className="text-3xl font-bold text-foreground mb-2">
            Unlock Your Full Wellness Potential
          </h1>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            Join thousands of users who have transformed their wellness journey with our premium features
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-8">
          {/* Features Card */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-primary" />
                Premium Features
              </CardTitle>
              <CardDescription>
                Everything you need for a comprehensive wellness journey
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {premiumFeatures.map((feature, index) => (
                <div key={index} className="flex items-start gap-3">
                  {feature.icon}
                  <div>
                    <h3 className="font-semibold text-sm">{feature.title}</h3>
                    <p className="text-xs text-muted-foreground">{feature.description}</p>
                  </div>
                </div>
              ))}
              <Separator />
              <div className="text-center space-y-2">
                <div className="text-2xl font-bold text-primary">$19.99/month</div>
                <div className="text-sm text-muted-foreground">
                  <span className="line-through">$29.99</span> â€¢ 60-day free trial
                </div>
                <Badge variant="outline" className="text-xs">
                  Cancel anytime
                </Badge>
              </div>
            </CardContent>
          </Card>

          {/* Payment Card */}
          <Card>
            <CardHeader>
              <CardTitle>Complete Your Subscription</CardTitle>
              <CardDescription>
                Start your 60-day free trial today - no payment required until trial ends
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Elements stripe={stripePromise} options={{ clientSecret }}>
                <SubscribeForm />
              </Elements>
            </CardContent>
          </Card>
        </div>

        <div className="mt-12 text-center">
          <p className="text-sm text-muted-foreground max-w-2xl mx-auto">
            By subscribing, you agree to our Terms of Service and Privacy Policy. 
            Your subscription will automatically renew unless cancelled before the trial period ends.
          </p>
        </div>
      </div>
    </div>
  );
}